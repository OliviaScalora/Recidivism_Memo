"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))))
cost_ben65<- cost_benefit_table65%>%
kable(caption = 'Cost/Benefit Table')%>%
kable_styling(html_font = 'helvetica')
cost_ben65
testProbs50 <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.5 , 1, 0)))
cost_benefit_table50 <-
testProbs50 %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Cost.65Threshold = case_when(Variable == "True_Negative"  ~ (Count * 0.1) * 10000,
Variable == "True_Positive"  ~ (Count *.75 *10000) + (Count *.25 * 42727),
Variable == "False_Negative" ~ Count * 42727,
Variable == "False_Positive" ~ Count * 10000))
testProbs65 <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.40 , 1, 0)))
cost_benefit_table65 <-
testProbs65 %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Cost.65Threshold = case_when(Variable == "True_Negative"  ~ (Count * 0.1) * 10000,
Variable == "True_Positive"  ~ (Count *.75 *10000) + (Count *.25 * 42727),
Variable == "False_Negative" ~ Count * 42727,
Variable == "False_Positive" ~ Count * 10000),
bind_cols(data.frame(Cost.5Threshold = c(
"639000",
"7636335",
"12091741",
"1980000"))),
bind_cols(data.frame(Social.Benefit = c(
"Individual is predicted to not recidivate and does not in reality.",
"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))),
bind_cols(data.frame(Description = c(
"Individual is predicted to not recidivate and does not in reality.",
"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))))
cost_ben65<- cost_benefit_table65%>%
kable(caption = 'Cost/Benefit Table',
datatable,align='lcrrll',)%>%
kable_styling(html_font = 'helvetica')
testProbs50 <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.5 , 1, 0)))
cost_benefit_table50 <-
testProbs50 %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Cost.65Threshold = case_when(Variable == "True_Negative"  ~ (Count * 0.1) * 10000,
Variable == "True_Positive"  ~ (Count *.75 *10000) + (Count *.25 * 42727),
Variable == "False_Negative" ~ Count * 42727,
Variable == "False_Positive" ~ Count * 10000))
testProbs65 <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.40 , 1, 0)))
cost_benefit_table65 <-
testProbs65 %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Cost.65Threshold = case_when(Variable == "True_Negative"  ~ (Count * 0.1) * 10000,
Variable == "True_Positive"  ~ (Count *.75 *10000) + (Count *.25 * 42727),
Variable == "False_Negative" ~ Count * 42727,
Variable == "False_Positive" ~ Count * 10000),
bind_cols(data.frame(Cost.5Threshold = c(
"639000",
"7636335",
"12091741",
"1980000"))),
bind_cols(data.frame(Social.Benefit = c(
"Individual is predicted to not recidivate and does not in reality.",
"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))),
bind_cols(data.frame(Description = c(
"Individual is predicted to not recidivate and does not in reality.",
"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))))
cost_ben65<- cost_benefit_table65%>%
kable(caption = 'Cost/Benefit Table',
datatable,align= C('l','c','r','r','l','l',))%>%
kable_styling(html_font = 'helvetica')
testProbs50 <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.5 , 1, 0)))
cost_benefit_table50 <-
testProbs50 %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Cost.65Threshold = case_when(Variable == "True_Negative"  ~ (Count * 0.1) * 10000,
Variable == "True_Positive"  ~ (Count *.75 *10000) + (Count *.25 * 42727),
Variable == "False_Negative" ~ Count * 42727,
Variable == "False_Positive" ~ Count * 10000))
testProbs65 <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.40 , 1, 0)))
cost_benefit_table65 <-
testProbs65 %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Cost.65Threshold = case_when(Variable == "True_Negative"  ~ (Count * 0.1) * 10000,
Variable == "True_Positive"  ~ (Count *.75 *10000) + (Count *.25 * 42727),
Variable == "False_Negative" ~ Count * 42727,
Variable == "False_Positive" ~ Count * 10000),
bind_cols(data.frame(Cost.5Threshold = c(
"639000",
"7636335",
"12091741",
"1980000"))),
bind_cols(data.frame(Social.Benefit = c(
"Individual is predicted to not recidivate and does not in reality.",
"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))),
bind_cols(data.frame(Description = c(
"Individual is predicted to not recidivate and does not in reality.",
"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))))
cost_ben65<- cost_benefit_table65%>%
kable(caption = 'Cost/Benefit Table',
align= C('l','c','r','r','l','l',))%>%
kable_styling(html_font = 'helvetica')
testProbs50 <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.5 , 1, 0)))
cost_benefit_table50 <-
testProbs50 %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Cost.65Threshold = case_when(Variable == "True_Negative"  ~ (Count * 0.1) * 10000,
Variable == "True_Positive"  ~ (Count *.75 *10000) + (Count *.25 * 42727),
Variable == "False_Negative" ~ Count * 42727,
Variable == "False_Positive" ~ Count * 10000))
testProbs65 <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.40 , 1, 0)))
cost_benefit_table65 <-
testProbs65 %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Cost.65Threshold = case_when(Variable == "True_Negative"  ~ (Count * 0.1) * 10000,
Variable == "True_Positive"  ~ (Count *.75 *10000) + (Count *.25 * 42727),
Variable == "False_Negative" ~ Count * 42727,
Variable == "False_Positive" ~ Count * 10000),
bind_cols(data.frame(Cost.5Threshold = c(
"639000",
"7636335",
"12091741",
"1980000"))),
bind_cols(data.frame(Social.Benefit = c(
"Individual is predicted to not recidivate and does not in reality.",
"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))),
bind_cols(data.frame(Description = c(
"Individual is predicted to not recidivate and does not in reality.",
"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))))
cost_ben65<- cost_benefit_table65%>%
kable(caption = 'Cost/Benefit Table',
align= C('l','c','r','r','l','l'))%>%
kable_styling(html_font = 'helvetica')
testProbs50 <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.5 , 1, 0)))
cost_benefit_table50 <-
testProbs50 %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Cost.65Threshold = case_when(Variable == "True_Negative"  ~ (Count * 0.1) * 10000,
Variable == "True_Positive"  ~ (Count *.75 *10000) + (Count *.25 * 42727),
Variable == "False_Negative" ~ Count * 42727,
Variable == "False_Positive" ~ Count * 10000))
testProbs65 <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.40 , 1, 0)))
cost_benefit_table65 <-
testProbs65 %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Cost.65Threshold = case_when(Variable == "True_Negative"  ~ (Count * 0.1) * 10000,
Variable == "True_Positive"  ~ (Count *.75 *10000) + (Count *.25 * 42727),
Variable == "False_Negative" ~ Count * 42727,
Variable == "False_Positive" ~ Count * 10000),
bind_cols(data.frame(Cost.5Threshold = c(
"639000",
"7636335",
"12091741",
"1980000"))),
bind_cols(data.frame(Social.Benefit = c(
"Individual is predicted to not recidivate and does not in reality.",
"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))),
bind_cols(data.frame(Description = c(
"Individual is predicted to not recidivate and does not in reality.",
"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))))
cost_ben65<- cost_benefit_table65%>%
kable(caption = 'Cost/Benefit Table',
align= 'l','c','r','r','l','l')%>%
kable_styling(html_font = 'helvetica')
?kable(align)
testProbs50 <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.5 , 1, 0)))
cost_benefit_table50 <-
testProbs50 %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Cost.65Threshold = case_when(Variable == "True_Negative"  ~ (Count * 0.1) * 10000,
Variable == "True_Positive"  ~ (Count *.75 *10000) + (Count *.25 * 42727),
Variable == "False_Negative" ~ Count * 42727,
Variable == "False_Positive" ~ Count * 10000))
testProbs65 <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.40 , 1, 0)))
cost_benefit_table65 <-
testProbs65 %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Cost.65Threshold = case_when(Variable == "True_Negative"  ~ (Count * 0.1) * 10000,
Variable == "True_Positive"  ~ (Count *.75 *10000) + (Count *.25 * 42727),
Variable == "False_Negative" ~ Count * 42727,
Variable == "False_Positive" ~ Count * 10000),
bind_cols(data.frame(Cost.5Threshold = c(
"639000",
"7636335",
"12091741",
"1980000"))),
bind_cols(data.frame(Social.Benefit = c(
"Individual is predicted to not recidivate and does not in reality.",
"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))),
bind_cols(data.frame(Description = c(
"Individual is predicted to not recidivate and does not in reality.",
"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))))
cost_ben65<- cost_benefit_table65%>%
kable(caption = 'Cost/Benefit Table',
align= c('l','c','r','r','l','l'))%>%
kable_styling(html_font = 'helvetica')
cost_ben65
testProbs.thresholds <-
iterateThresholds(data=testProbs, observedClass = class,
predictedProbs = probs, group = Race)
pl5<- filter(testProbs.thresholds, Threshold == .5)  %>%
dplyr::select(Accuracy, Race, starts_with("Rate")) %>%
gather(Variable, Value, -Race) %>%
ggplot(aes(Variable, Value, fill = Race)) +
geom_bar(aes(fill = Race), position = "dodge", stat = "identity") +
scale_fill_manual(values = palette_3_colors) +
labs(title="Confusion matrix rates by race",
caption = 'fig.2',
subtitle = "50% threshold", x = "Outcome",y = "Rate") +
theme_tufte()+
theme(legend.position = "bottom",
text = element_text(size = 12, family = 'Monaco', color = '#f2f4f7'),
axis.text.y = element_text(color = '#f2f4f7', size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, color = '#f2f4f7', size = 12),
plot.background = element_rect(fill ='#6189a0', color = NA),
panel.grid.major.y = element_line(color='grey85',linetype = 'dashed'),
plot.margin = unit(c(.5,1.5,.5,.5), "cm"))
pl6<- filter(testProbs.thresholds, Threshold == .4|Threshold == .5|Threshold == .6)  %>%
dplyr::select(Accuracy, Race, starts_with("Rate"), Threshold) %>%
gather(Variable, Value, -Race) %>%
ggplot(aes(Variable, Value, fill = Race)) +
geom_bar(aes(fill = Race), position = "dodge", stat = "identity") +
scale_fill_manual(values = palette_3_colors) +
facet_wrap(Threshold)+
labs(title="Confusion matrix rates by race",
caption = 'fig.3',
subtitle = "40% threshold", x = "Outcome",y = "Rate") +
theme_tufte()+
theme(legend.position = "bottom",
text = element_text(size = 12, family = 'Monaco', color = '#f2f4f7'),
axis.text.y = element_text(color = '#f2f4f7', size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, color = '#f2f4f7', size = 12),
plot.background = element_rect(fill ='#6189a0', color = NA),
panel.grid.major.y = element_line(color='grey85',linetype = 'dashed'),
plot.margin = unit(c(.5,1.5,.5,.5), "cm"))
testProbs.thresholds <-
iterateThresholds(data=testProbs, observedClass = class,
predictedProbs = probs, group = Race)
pl5<- filter(testProbs.thresholds, Threshold == .5)  %>%
dplyr::select(Accuracy, Race, starts_with("Rate")) %>%
gather(Variable, Value, -Race) %>%
ggplot(aes(Variable, Value, fill = Race)) +
geom_bar(aes(fill = Race), position = "dodge", stat = "identity") +
scale_fill_manual(values = palette_3_colors) +
labs(title="Confusion matrix rates by race",
caption = 'fig.2',
subtitle = "50% threshold", x = "Outcome",y = "Rate") +
theme_tufte()+
theme(legend.position = "bottom",
text = element_text(size = 12, family = 'Monaco', color = '#f2f4f7'),
axis.text.y = element_text(color = '#f2f4f7', size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, color = '#f2f4f7', size = 12),
plot.background = element_rect(fill ='#6189a0', color = NA),
panel.grid.major.y = element_line(color='grey85',linetype = 'dashed'),
plot.margin = unit(c(.5,1.5,.5,.5), "cm"))
pl6<- filter(testProbs.thresholds, Threshold == .4|Threshold == .5|Threshold == .6)  %>%
dplyr::select(Accuracy, Race, starts_with("Rate"), Threshold) %>%
gather(Variable, Value, -Race, Threshold) %>%
ggplot(aes(Variable, Value, fill = Race)) +
geom_bar(aes(fill = Race), position = "dodge", stat = "identity") +
scale_fill_manual(values = palette_3_colors) +
facet_wrap(Threshold)+
labs(title="Confusion matrix rates by race",
caption = 'fig.3',
subtitle = "40% threshold", x = "Outcome",y = "Rate") +
theme_tufte()+
theme(legend.position = "bottom",
text = element_text(size = 12, family = 'Monaco', color = '#f2f4f7'),
axis.text.y = element_text(color = '#f2f4f7', size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, color = '#f2f4f7', size = 12),
plot.background = element_rect(fill ='#6189a0', color = NA),
panel.grid.major.y = element_line(color='grey85',linetype = 'dashed'),
plot.margin = unit(c(.5,1.5,.5,.5), "cm"))
testProbs.thresholds1<- filter(testProbs.thresholds, Threshold == .4|Threshold == .5|Threshold == .6)  %>%
dplyr::select(Accuracy, Race, starts_with("Rate"), Threshold)
View(testProbs.thresholds1)
testProbs.thresholds1<- filter(testProbs.thresholds, Threshold == .4|Threshold == .5|Threshold == .6)  %>%
dplyr::select(Accuracy, Race, starts_with("Rate"), Threshold) %>%
gather(Variable, Value, -Race, Threshold)
testProbs.thresholds <-
iterateThresholds(data=testProbs, observedClass = class,
predictedProbs = probs, group = Race)
pl5<- filter(testProbs.thresholds, Threshold == .5)  %>%
dplyr::select(Accuracy, Race, starts_with("Rate")) %>%
gather(Variable, Value, -Race) %>%
ggplot(aes(Variable, Value, fill = Race)) +
geom_bar(aes(fill = Race), position = "dodge", stat = "identity") +
scale_fill_manual(values = palette_3_colors) +
labs(title="Confusion matrix rates by race",
caption = 'fig.2',
subtitle = "50% threshold", x = "Outcome",y = "Rate") +
theme_tufte()+
theme(legend.position = "bottom",
text = element_text(size = 12, family = 'Monaco', color = '#f2f4f7'),
axis.text.y = element_text(color = '#f2f4f7', size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, color = '#f2f4f7', size = 12),
plot.background = element_rect(fill ='#6189a0', color = NA),
panel.grid.major.y = element_line(color='grey85',linetype = 'dashed'),
plot.margin = unit(c(.5,1.5,.5,.5), "cm"))
pl6<- filter(testProbs.thresholds, Threshold == .4)  %>%
dplyr::select(Accuracy, Race, starts_with("Rate"), Threshold) %>%
gather(Variable, Value, -Race) %>%
ggplot(aes(Variable, Value, fill = Race)) +
geom_bar(aes(fill = Race), position = "dodge", stat = "identity") +
scale_fill_manual(values = palette_3_colors) +
labs(title="Confusion matrix rates by race",
caption = 'fig.3',
subtitle = "40% threshold", x = "Outcome",y = "Rate") +
theme_tufte()+
theme(legend.position = "bottom",
text = element_text(size = 12, family = 'Monaco', color = '#f2f4f7'),
axis.text.y = element_text(color = '#f2f4f7', size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, color = '#f2f4f7', size = 12),
plot.background = element_rect(fill ='#6189a0', color = NA),
panel.grid.major.y = element_line(color='grey85',linetype = 'dashed'),
plot.margin = unit(c(.5,1.5,.5,.5), "cm"))
grid.arrange(pl5, pl6, nrow=1)
testProbs.thresholds <-
iterateThresholds(data=testProbs, observedClass = class,
predictedProbs = probs, group = Race)
pl5<- filter(testProbs.thresholds, Threshold == .5)  %>%
dplyr::select(Accuracy, Race, starts_with("Rate")) %>%
gather(Variable, Value, -Race) %>%
ggplot(aes(Variable, Value, fill = Race)) +
geom_bar(aes(fill = Race), position = "dodge", stat = "identity") +
scale_fill_manual(values = palette_3_colors) +
labs(title="Confusion matrix rates by race",
caption = 'fig.2',
subtitle = "50% threshold", x = "Outcome",y = "Rate") +
theme_tufte()+
theme(legend.position = "bottom",
text = element_text(size = 12, family = 'Monaco', color = '#f2f4f7'),
axis.text.y = element_text(color = '#f2f4f7', size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, color = '#f2f4f7', size = 12),
plot.background = element_rect(fill ='#6189a0', color = NA),
panel.grid.major.y = element_line(color='grey85',linetype = 'dashed'),
plot.margin = unit(c(.5,1.5,.5,.5), "cm"))
pl6<- filter(testProbs.thresholds, Threshold == .4)  %>%
dplyr::select(Accuracy, Race, starts_with("Rate")) %>%
gather(Variable, Value, -Race) %>%
ggplot(aes(Variable, Value, fill = Race)) +
geom_bar(aes(fill = Race), position = "dodge", stat = "identity") +
scale_fill_manual(values = palette_3_colors) +
labs(title="Confusion matrix rates by race",
caption = 'fig.3',
subtitle = "40% threshold", x = "Outcome",y = "Rate") +
theme_tufte()+
theme(legend.position = "bottom",
text = element_text(size = 12, family = 'Monaco', color = '#f2f4f7'),
axis.text.y = element_text(color = '#f2f4f7', size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, color = '#f2f4f7', size = 12),
plot.background = element_rect(fill ='#6189a0', color = NA),
panel.grid.major.y = element_line(color='grey85',linetype = 'dashed'),
plot.margin = unit(c(.5,1.5,.5,.5), "cm"))
grid.arrange(pl5, pl6, nrow=1)
testProbs50 <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.5 , 1, 0)))
cost_benefit_table50 <-
testProbs50 %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(Cost.65Threshold = case_when(Variable == "True_Negative"  ~ (Count * 0.1) * 10000,
Variable == "True_Positive"  ~ (Count *.75 *10000) + (Count *.25 * 42727),
Variable == "False_Negative" ~ Count * 42727,
Variable == "False_Positive" ~ Count * 10000))
testProbs65 <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$probs > 0.40 , 1, 0)))
cost_benefit_table65 <-
testProbs65 %>%
count(predOutcome, class) %>%
summarize(True_Negative = sum(n[predOutcome==0 & class==0]),
True_Positive = sum(n[predOutcome==1 & class==1]),
False_Negative = sum(n[predOutcome==0 & class==1]),
False_Positive = sum(n[predOutcome==1 & class==0])) %>%
gather(Variable, Count) %>%
mutate(bind_cols(data.frame(Cost.50 = c(
"639000",
"7636335",
"12091741",
"1980000"))),
Cost.40 = case_when(Variable == "True_Negative"  ~ (Count * 0.1) * 10000,
Variable == "True_Positive"  ~ (Count *.75 *10000) + (Count *.25 * 42727),
Variable == "False_Negative" ~ Count * 42727,
Variable == "False_Positive" ~ Count * 10000),
bind_cols(data.frame(Social.Benefit = c(
"Individual is predicted to
",
"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))),
bind_cols(data.frame(Description = c(
"Individual is predicted to not recidivate and does not in reality.",
"Individual is predicted to recidivate and does in reality.",
"Individual is predicted to not recidivate but does in reality.",
"Individual is predicted to recidivate but does not in reality."))))
cost_ben65<- cost_benefit_table65%>%
kable(caption = 'Cost/Benefit Table',
align= c('l','c','r','r','l','l'))%>%
kable_styling(html_font = 'helvetica')
cost_ben65
